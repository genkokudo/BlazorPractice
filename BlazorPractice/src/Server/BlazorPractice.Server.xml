<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BlazorPractice.Server</name>
    </assembly>
    <members>
        <member name="T:BlazorPractice.Server.Controllers.BaseApiController`1">
            <summary>
            Abstract BaseApi Controller Class
            </summary>
        </member>
        <member name="M:BlazorPractice.Server.Controllers.Communication.ChatsController.GetChatHistoryAsync(System.String)">
            <summary>
            Get user wise chat history
            </summary>
            <param name="contactId"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:BlazorPractice.Server.Controllers.Communication.ChatsController.GetChatUsersAsync">
            <summary>
            get available users
            </summary>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:BlazorPractice.Server.Controllers.Communication.ChatsController.SaveMessageAsync(BlazorPractice.Application.Models.Chat.ChatHistory{BlazorPractice.Application.Interfaces.Chat.IChatUser})">
            <summary>
            Save Chat Message
            </summary>
            <param name="message"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:BlazorPractice.Server.Controllers.Identity.AccountController.UpdateProfile(BlazorPractice.Application.Requests.Identity.UpdateProfileRequest)">
            <summary>
            Update Profile
            </summary>
            <param name="model"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:BlazorPractice.Server.Controllers.Identity.AccountController.ChangePassword(BlazorPractice.Application.Requests.Identity.ChangePasswordRequest)">
            <summary>
            パスワード変更
            </summary>
            <param name="model"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:BlazorPractice.Server.Controllers.Identity.AccountController.GetProfilePictureAsync(System.String)">
            <summary>
            IDからプロフィール写真のURLを取得
            失敗したらメッセージが入る
            </summary>
            <param name="userId">ユーザID</param>
            <returns>Status 200 OK </returns>
        </member>
        <member name="M:BlazorPractice.Server.Controllers.Identity.AccountController.UpdateProfilePictureAsync(BlazorPractice.Application.Requests.Identity.UpdateProfilePictureRequest)">
            <summary>
            プロフィール写真のアップロード
            </summary>
            <param name="request"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:BlazorPractice.Server.Controllers.Identity.TokenController.Get(BlazorPractice.Application.Requests.Identity.TokenRequest)">
            <summary>
            Get Token (Email, Password)
            </summary>
            <param name="model"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:BlazorPractice.Server.Controllers.Identity.TokenController.Refresh(BlazorPractice.Application.Requests.Identity.RefreshTokenRequest)">
            <summary>
            トークンの更新
            </summary>
            <param name="model"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:BlazorPractice.Server.Controllers.Identity.UserController.GetAll">
            <summary>
            Get User Details
            </summary>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:BlazorPractice.Server.Controllers.Identity.UserController.GetById(System.String)">
            <summary>
            Get User By Id
            </summary>
            <param name="id"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:BlazorPractice.Server.Controllers.Identity.UserController.GetRolesAsync(System.String)">
            <summary>
            Get User Roles By Id
            </summary>
            <param name="id"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:BlazorPractice.Server.Controllers.Identity.UserController.UpdateRolesAsync(BlazorPractice.Application.Requests.Identity.UpdateUserRolesRequest)">
            <summary>
            Update Roles for User
            </summary>
            <param name="request"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:BlazorPractice.Server.Controllers.Identity.UserController.RegisterAsync(BlazorPractice.Application.Requests.Identity.RegisterRequest)">
            <summary>
            Register a User
            </summary>
            <param name="request"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:BlazorPractice.Server.Controllers.Identity.UserController.ConfirmEmailAsync(System.String,System.String)">
            <summary>
            Confirm Email
            </summary>
            <param name="userId"></param>
            <param name="code"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:BlazorPractice.Server.Controllers.Identity.UserController.ToggleUserStatusAsync(BlazorPractice.Application.Requests.Identity.ToggleUserStatusRequest)">
            <summary>
            Toggle User Status (Activate and Deactivate)
            </summary>
            <param name="request"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:BlazorPractice.Server.Controllers.Identity.UserController.ForgotPasswordAsync(BlazorPractice.Application.Requests.Identity.ForgotPasswordRequest)">
            <summary>
            Forgot Password
            </summary>
            <param name="request"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:BlazorPractice.Server.Controllers.Identity.UserController.ResetPasswordAsync(BlazorPractice.Application.Requests.Identity.ResetPasswordRequest)">
            <summary>
            Reset Password
            </summary>
            <param name="request"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:BlazorPractice.Server.Controllers.Identity.UserController.Export(System.String)">
            <summary>
            Export to Excel
            </summary>
            <param name="searchString"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:BlazorPractice.Server.Controllers.RoleClaimController.GetAll">
            <summary>
            Get All Role Claims(e.g. Product Create Permission)
            </summary>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:BlazorPractice.Server.Controllers.RoleClaimController.GetAllByRoleId(System.String)">
            <summary>
            Get All Role Claims By Id
            </summary>
            <param name="roleId"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:BlazorPractice.Server.Controllers.RoleClaimController.Post(BlazorPractice.Application.Requests.Identity.RoleClaimRequest)">
            <summary>
            Add a Role Claim
            </summary>
            <param name="request"></param>
            <returns>Status 200 OK </returns>
        </member>
        <member name="M:BlazorPractice.Server.Controllers.RoleClaimController.Delete(System.Int32)">
            <summary>
            Delete a Role Claim
            </summary>
            <param name="id"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:BlazorPractice.Server.Controllers.RoleController.GetAll">
            <summary>
            Get All Roles (basic, admin etc.)
            </summary>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:BlazorPractice.Server.Controllers.RoleController.Post(BlazorPractice.Application.Requests.Identity.RoleRequest)">
            <summary>
            Add a Role
            </summary>
            <param name="request"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:BlazorPractice.Server.Controllers.RoleController.Delete(System.String)">
            <summary>
            Delete a Role
            </summary>
            <param name="id"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:BlazorPractice.Server.Controllers.RoleController.GetPermissionsByRoleId(System.String)">
            <summary>
            Get Permissions By Role Id
            </summary>
            <param name="roleId"></param>
            <returns>Status 200 Ok</returns>
        </member>
        <member name="M:BlazorPractice.Server.Controllers.RoleController.Update(BlazorPractice.Application.Requests.Identity.PermissionRequest)">
            <summary>
            Edit a Role Claim
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:BlazorPractice.Server.Controllers.Utilities.AuditsController.GetUserTrailsAsync">
            <summary>
            Get Current User Audit Trails
            </summary>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:BlazorPractice.Server.Controllers.Utilities.AuditsController.ExportExcel(System.String,System.Boolean,System.Boolean)">
            <summary>
            Search Audit Trails and Export to Excel
            </summary>
            <param name="searchString"></param>
            <param name="searchInOldValues"></param>
            <param name="searchInNewValues"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="T:BlazorPractice.Server.Controllers.Utilities.ExtendedAttributes.Base.ExtendedAttributesController`4">
            <summary>
            抽象拡張属性コントローラクラス
            
            CRUDはこれでまとめている。継承して型引数にEntityを入れるだけでAPIができる
            TEntityはEntityクラスの型、TExtendedAttributeはTEntityを型引数に作成したAuditableEntityExtendedAttributeクラス
            
            APIなので、クライアント用のデータにAutoMapperで変換したものが返される
            
            TIdはAuditableEntityのID、TEntityIdはIEntityのIDなので、何故両方持たせる必要があるのか謎。
            </summary>
        </member>
        <member name="M:BlazorPractice.Server.Controllers.Utilities.ExtendedAttributes.Base.ExtendedAttributesController`4.GetAll">
            <summary>
            全検索
            </summary>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:BlazorPractice.Server.Controllers.Utilities.ExtendedAttributes.Base.ExtendedAttributesController`4.GetAllByEntityId(`1)">
            <summary>
            エンティティIDによる全エントリ拡張属性の取得
            </summary>
            <param name="entityId"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:BlazorPractice.Server.Controllers.Utilities.ExtendedAttributes.Base.ExtendedAttributesController`4.GetById(`0)">
            <summary>
            IDによる検索
            AutoMapperによってクライアント用のデータ形式（？）に変換して取得している
            </summary>
            <param name="id"></param>
            <returns>Status 200 Ok</returns>
        </member>
        <member name="M:BlazorPractice.Server.Controllers.Utilities.ExtendedAttributes.Base.ExtendedAttributesController`4.Post(BlazorPractice.Application.Features.ExtendedAttributes.Commands.AddEdit.AddEditExtendedAttributeCommand{`0,`1,`2,`3})">
            <summary>
            新規登録と更新
            </summary>
            <param name="command"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:BlazorPractice.Server.Controllers.Utilities.ExtendedAttributes.Base.ExtendedAttributesController`4.Delete(`0)">
            <summary>
            削除
            </summary>
            <param name="id"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:BlazorPractice.Server.Controllers.Utilities.ExtendedAttributes.Base.ExtendedAttributesController`4.Export(System.String,`1,System.Boolean,System.Boolean,System.String)">
            <summary>
            エンティティ拡張属性の検索とExcelへのエクスポート
            </summary>
            <param name="searchString"></param>
            <param name="entityId"></param>
            <param name="includeEntity"></param>
            <param name="onlyCurrentGroup"></param>
            <param name="currentGroup"></param>
            <returns>DataにExcelファイルデータのByte配列を入れる</returns>
        </member>
        <member name="T:BlazorPractice.Server.Controllers.Utilities.ExtendedAttributes.Misc.DocumentExtendedAttributesController">
            <summary>
            Document用の拡張コントローラ
            ルーティングはBaseクラスで行なっているので、ここでは権限設定だけ
            </summary>
        </member>
        <member name="M:BlazorPractice.Server.Controllers.Utilities.Misc.DocumentsController.GetAll(System.Int32,System.Int32,System.String)">
            <summary>
            Get All Documents
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="searchString"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:BlazorPractice.Server.Controllers.Utilities.Misc.DocumentsController.GetById(System.Int32)">
            <summary>
            Get Document By Id
            </summary>
            <param name="id"></param>
            <returns>Status 200 Ok</returns>
        </member>
        <member name="M:BlazorPractice.Server.Controllers.Utilities.Misc.DocumentsController.Post(BlazorPractice.Application.Features.Documents.Commands.AddEdit.AddEditDocumentCommand)">
            <summary>
            Add/Edit Document
            </summary>
            <param name="command"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:BlazorPractice.Server.Controllers.Utilities.Misc.DocumentsController.Delete(System.Int32)">
            <summary>
            Delete a Document
            </summary>
            <param name="id"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:BlazorPractice.Server.Controllers.Utilities.Misc.DocumentTypesController.GetAll">
            <summary>
            Get All Document Types
            </summary>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:BlazorPractice.Server.Controllers.Utilities.Misc.DocumentTypesController.GetById(System.Int32)">
            <summary>
            Get Document Type By Id
            </summary>
            <param name="id"></param>
            <returns>Status 200 Ok</returns>
        </member>
        <member name="M:BlazorPractice.Server.Controllers.Utilities.Misc.DocumentTypesController.Post(BlazorPractice.Application.Features.DocumentTypes.Commands.AddEdit.AddEditDocumentTypeCommand)">
            <summary>
            Create/Update a Document Type
            </summary>
            <param name="command"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:BlazorPractice.Server.Controllers.Utilities.Misc.DocumentTypesController.Delete(System.Int32)">
            <summary>
            Delete a Document Type
            </summary>
            <param name="id"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:BlazorPractice.Server.Controllers.Utilities.Misc.DocumentTypesController.Export(System.String)">
            <summary>
            Search Document Types and Export to Excel
            </summary>
            <param name="searchString"></param>
            <returns></returns>
        </member>
        <member name="M:BlazorPractice.Server.Controllers.Utilities.PreferencesController.ChangeLanguageAsync(System.String)">
            <summary>
            Change Language Preference
            </summary>
            <param name="languageCode"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:BlazorPractice.Server.Controllers.v1.Catalog.BrandsController.GetAll">
            <summary>
            Get All Brands
            </summary>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:BlazorPractice.Server.Controllers.v1.Catalog.BrandsController.GetById(System.Int32)">
            <summary>
            Get a Brand By Id
            </summary>
            <param name="id"></param>
            <returns>Status 200 Ok</returns>
        </member>
        <member name="M:BlazorPractice.Server.Controllers.v1.Catalog.BrandsController.Post(BlazorPractice.Application.Features.Brands.Commands.AddEdit.AddEditBrandCommand)">
            <summary>
            Create/Update a Brand
            </summary>
            <param name="command"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:BlazorPractice.Server.Controllers.v1.Catalog.BrandsController.Delete(System.Int32)">
            <summary>
            Delete a Brand
            </summary>
            <param name="id"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:BlazorPractice.Server.Controllers.v1.Catalog.BrandsController.Export(System.String)">
            <summary>
            Search Brands and Export to Excel
            </summary>
            <param name="searchString"></param>
            <returns></returns>
        </member>
        <member name="M:BlazorPractice.Server.Controllers.v1.Catalog.ProductsController.GetAll(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Get All Products
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="searchString"></param>
            <param name="orderBy"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:BlazorPractice.Server.Controllers.v1.Catalog.ProductsController.GetProductImageAsync(System.Int32)">
            <summary>
            Get a Product Image by Id
            </summary>
            <param name="id"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:BlazorPractice.Server.Controllers.v1.Catalog.ProductsController.Post(BlazorPractice.Application.Features.Products.Commands.AddEdit.AddEditProductCommand)">
            <summary>
            Add/Edit a Product
            </summary>
            <param name="command"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:BlazorPractice.Server.Controllers.v1.Catalog.ProductsController.Delete(System.Int32)">
            <summary>
            Delete a Product
            </summary>
            <param name="id"></param>
            <returns>Status 200 OK response</returns>
        </member>
        <member name="M:BlazorPractice.Server.Controllers.v1.Catalog.ProductsController.Export(System.String)">
            <summary>
            Search Products and Export to Excel
            </summary>
            <param name="searchString"></param>
            <returns>Status 200 OK</returns>
        </member>
        <member name="M:BlazorPractice.Server.Controllers.v1.DashboardController.GetDataAsync">
            <summary>
            Get Dashboard Data
            </summary>
            <returns>Status 200 OK </returns>
        </member>
        <member name="M:BlazorPractice.Server.Extensions.ApplicationBuilderExtensions.UseExceptionHandling(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            開発環境の場合、例外が発生したらエラーページを表示する
            </summary>
            <param name="app"></param>
            <param name="env"></param>
            <returns></returns>
        </member>
        <member name="M:BlazorPractice.Server.Extensions.ApplicationBuilderExtensions.ConfigureSwagger(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Swaggerの設定
            </summary>
            <param name="app"></param>
        </member>
        <member name="M:BlazorPractice.Server.Extensions.ApplicationBuilderExtensions.UseRequestLocalizationByCulture(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            カルチャ関係だけどよく分からない
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="M:BlazorPractice.Server.Extensions.ApplicationBuilderExtensions.Initialize(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            IDatabaseSeederで初期化する
            </summary>
            <param name="app"></param>
            <param name="_configuration"></param>
            <returns></returns>
        </member>
        <member name="M:BlazorPractice.Server.Extensions.HostBuilderExtensions.UseSerilog(Microsoft.Extensions.Hosting.IHostBuilder)">
            <summary>
            ログ設定
            Program.csで呼ぶ
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="T:BlazorPractice.Server.Extensions.MvcBuilderExtensions">
            <summary>
            Startupで使用
            FluentValidationの実装クラスをすべて登録する
            </summary>
        </member>
        <member name="M:BlazorPractice.Server.Extensions.MvcBuilderExtensions.AddExtendedAttributesValidators(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            AddEditExtendedAttributeCommandValidatorを実装しているバリデータをまとめて登録する
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:BlazorPractice.Server.Extensions.ServiceCollectionExtensions.RegisterSwagger(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Swaggerを有効にする
            （APIドキュメントの自動生成）
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:BlazorPractice.Server.Extensions.ServiceCollectionExtensions.AddSerialization(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Jsonシリアライザをサービス登録する
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:BlazorPractice.Server.Extensions.ServiceCollectionExtensions.AddDatabase(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            データベースをサービス登録する
            </summary>
            <param name="services"></param>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:BlazorPractice.Server.Extensions.ServiceCollectionExtensions.AddCurrentUserService(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            現在のユーザのClainやIDを取得するアクセサを登録する
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:BlazorPractice.Server.Extensions.ServiceCollectionExtensions.AddIdentity(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            ポリシー判定サービスやパスワードポリシーの設定
            カスタムしたユーザと権限情報の使用設定
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:BlazorPractice.Server.Extensions.ServiceCollectionExtensions.AddSharedInfrastructure(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            その他のサービスを登録
            </summary>
            <param name="services"></param>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="M:BlazorPractice.Server.Extensions.ServiceCollectionExtensions.AddApplicationServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            その他独自のサービスの登録
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:BlazorPractice.Server.Extensions.ServiceCollectionExtensions.AddJwtAuthentication(Microsoft.Extensions.DependencyInjection.IServiceCollection,BlazorPractice.Application.Configurations.AppConfiguration)">
            <summary>
            Bearer認証を設定する
            Permissionsクラスに設定している権限を全てポリシーに設定する
            </summary>
            <param name="services"></param>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="T:BlazorPractice.Server.Filters.HangfireAuthorizationFilter">
            <summary>
            UseHangfireDashboardで使用
            </summary>
        </member>
        <member name="T:BlazorPractice.Server.Localization.ServerLocalizer`1">
            <summary>
            ローカライズサービス
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:BlazorPractice.Server.Managers.Preferences.IServerPreferenceManager">
            <summary>
            サーバ側設定のインタフェース
            </summary>
        </member>
        <member name="T:BlazorPractice.Server.Managers.Preferences.ServerPreferenceManager">
            <summary>
            サーバ側の設定管理
            ローカライズの管理
            </summary>
        </member>
        <member name="T:BlazorPractice.Server.Middlewares.ErrorHandlerMiddleware">
            <summary>
            エラーが発生したらここでハンドリングできるようにする
            エラー発生時にレスポンスに入れるステータスコードを設定する
            </summary>
        </member>
        <member name="T:BlazorPractice.Server.Middlewares.RequestCultureMiddleware">
            <summary>
            リクエストに特定のカルチャ情報がある場合、CultureInfoの設定値を変更する
            CultureInfoが何か分からないけど。
            </summary>
        </member>
        <member name="T:BlazorPractice.Server.Permission.PermissionAuthorizationHandler">
            <summary>
            ユーザのClaimから必要な権限があるかを探して、許可の判定をする
            </summary>
        </member>
        <member name="M:BlazorPractice.Server.Permission.PermissionAuthorizationHandler.HandleRequirementAsync(Microsoft.AspNetCore.Authorization.AuthorizationHandlerContext,BlazorPractice.Server.Permission.PermissionRequirement)">
            <summary>
            Baseの処理は呼ばない
            </summary>
            <param name="context">認証におけるコンテキスト</param>
            <param name="requirement">必要な権限</param>
            <returns></returns>
        </member>
        <member name="T:BlazorPractice.Server.Permission.PermissionPolicyProvider">
            <summary>
            カスタム認可ポリシー プロバイダー
            ポリシー名を指定して、その認可ポリシーを取得する
            </summary>
        </member>
        <member name="M:BlazorPractice.Server.Permission.PermissionPolicyProvider.GetPolicyAsync(System.String)">
            <summary>
            "Permission"で始まっているポリシーはPermissionAuthorizationHandlerで判定・取得（多分。違うかもしれない）
            それ以外はFallbackPolicyProviderで取得
            </summary>
            <param name="policyName"></param>
            <returns></returns>
        </member>
        <member name="T:BlazorPractice.Server.Permission.PermissionRequirement">
            <summary>
            必要な権限チェックを行うときの許可の条件
            </summary>
        </member>
        <member name="P:BlazorPractice.Server.Permission.PermissionRequirement.Permission">
            <summary>
            この文字列を条件にUserのClaimを検索する
            あれば認証が成功する
            "Permission"で始まる？
            </summary>
        </member>
        <member name="T:BlazorPractice.Server.Services.CurrentUserService">
            <summary>
            現在のユーザのClaimやIDを取得するアクセサ
            </summary>
        </member>
        <member name="T:BlazorPractice.Server.Startup">
            <summary>
            サーバプログラムの設定
            </summary>
        </member>
    </members>
</doc>
