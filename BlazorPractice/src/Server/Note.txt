★UnitOfWorkについて（まだちゃんとわかってないし、普通にトランザクション切れば良いと思う。複数DbContextがあるなら要りそう）
リポジトリが複数ある場合（1回の処理で複数のテーブルを更新する場合）
片方のテーブルが更新できて、もう片方が更新失敗をしてしまうと一貫性が保てない。
そこで、DbContextをラッピングしてトランザクション管理をする層を作っておく。

TIdはAuditableEntityのID、TEntityIdはIEntityのIDでどちらも一意のはず。何故両方とも各レコードに持たせているのかが分からない。
TIdでもTEntityIdでも検索できるようになっている。

★LazyCacheについて
DBのキャッシュをしている
ApplicationConstants.Cacheでキャッシュキーを生成して使う。
検索メソッドをデリゲートで書くのがポイント。GetOrAddAsyncというメソッドでキャッシュがあれば取得、無ければ第2引数のデリゲートを実行してキャッシュ登録という仕組み

★ポリシーによる認証について
Startupで行われている設定で、以下の事を行っている
・AddIdentity：ポリシー権限判定方法の設定
・AddJwtAuthentication：ポリシーの種類と判定ロジックの登録
ここで設定しているポリシーは、[Authorize(Policy = Permissions.Products.View)]みたいに使用する

★検索の絞り込みについて
あらかじめWhere句にあたる部分をクラス化して、IQueryableを拡張することで
グローバルクエリフィルタみたいなことをやってる。

★Hangfireについて
Hangfireは、自動化されたタスクまたはcronジョブを管理するための便利なツールです。
毎日または毎週特定の時間に実行する必要があるサービスメソッドがある場合、hangfireはそれを支援します。

★FluentValidationについて
有効にすると、MVCはコントローラーアクションに渡されるオブジェクトを検証します。
こういう感じで。
public ActionResult Save([CustomizeValidator(RuleSet="MyRuleset")] Customer cust) {}

登録はStartupでまとめて行う。
本体はここ：BlazorPractice.Application.Validators.Features.ExtendedAttributes.Commands.AddEdit

★リポジトリパターン
データアクセスするロジックをcontrollerから切り離して集約する考え方。CRUD操作に関してビジネスロジックを考慮する必要がなくなる。
コントローラにリポジトリをインジェクションする。
Entity毎にリポジトリを作っても良いし、全てのエンティティに対して1つのリポジトリを作る考え方もある。

★Serverプロジェクトについて
■Controllers
APIコントローラを入れるところ。
・Utilities
ExtendedAttributesControllerという汎用的なコントローラを作成して、
各Entityに共通の機能を持たせている。CRUDもこれでできる。
継承したクラスをMiscフォルダに入れる。

■Extensions
主に、Startupの時にいつもやってる設定を整理して、Builderの拡張としている。

■Files
初期化時に、静的ファイルとしてアクセスできるように設定している。

■Hubs
SignalRで使用する

■Localization
ローカライズ関係

■Managers
管理クラスを入れる所だけど、
今のところ、サーバ側のユーザ設定管理のみ

■Middlewares
Middlewareを入れる所。

■Permission
API呼び出し時などの権限チェック方法についてカスタムしている。

■Resources
多言語対応ファイルを入れる所。
それ以外のリソースはここには入れない。

■Services
Serviceは別プロジェクトに入れるので、ここは殆ど使わないはず。

■Settings
サーバの設定項目があればここに追加する。



